import asyncio


async def start_strongman(name: str, power: int):
    """
    :param name: имя силача
    :param power: его подъёмная мощность
    """
    # В начале работы должна выводиться строка - 'Силач <имя силача> начал соревнования.'
    print(f'Силач {name} начал соревнования')

    # Для каждого участника количество шаров одинаковое - 5.
    for ball in range(5):
        # После должна выводиться строка - 'Силач <имя силача> поднял <номер шара>'
        # с задержкой обратно пропорциональной его силе power.
        await asyncio.sleep(1/power)
        print(f'Силач {name} поднял шар {ball+1}')

    # В конце поднятия всех шаров должна выводится строка 'Силач <имя силача> закончил соревнования.'
    print(f'Силач {name} закончил соревнования')


async def start_tournament(strongmen: dict[str, int]):
    # напишите асинхронную функцию start_tournament,
    # в которой создаются 3 задачи для функций start_strongman.
    tasks = [asyncio.create_task(start_strongman(name, power)) for name, power in strongmen.items()]
    # После поставьте каждую задачу в ожидание (await).
    for task in tasks:
        await task


def main():
    # Имена(name) и силу(power) для вызовов функции start_strongman можете выбрать самостоятельно.
    strongmen = {
        'Pasha': 3,
        'Denis': 4,
        'Apollon': 5,
    }
    # Запустите асинхронную функцию start_tournament методом run.
    asyncio.run(start_tournament(strongmen))
    """
    Вывод на консоль:
    Силач Pasha начал соревнования
    Силач Denis начал соревнования
    Силач Apollon начал соревнования
    Силач Apollon поднял 1 шар
    Силач Denis поднял 1 шар
    Силач Pasha поднял 1 шар
    Силач Apollon поднял 2 шар
    Силач Denis поднял 2 шар
    Силач Apollon поднял 3 шар
    Силач Pasha поднял 2 шар
    Силач Denis поднял 3 шар
    Силач Apollon поднял 4 шар
    Силач Pasha поднял 3 шар
    Силач Apollon поднял 5 шар
    Силач Apollon закончил соревнования
    Силач Denis поднял 4 шар
    Силач Denis поднял 5 шар
    Силач Denis закончил соревнования
    Силач Pasha поднял 4 шар
    Силач Pasha поднял 5 шар
    Силач Pasha закончил соревнования
    """


if __name__ == '__main__':
    main()


"""
2024/01/15 00:00|Домашнее задание по теме "Асинхронность на практике"
Цель: приобрести навык использования асинхронного запуска функций на практике

Задача "Асинхронные силачи":
Необходимо сделать имитацию соревнований по поднятию шаров Атласа.
Напишите асинхронную функцию start_strongman(name, power), где name - имя силача, power - его подъёмная мощность. Реализуйте следующую логику в функции:
В начале работы должна выводиться строка - 'Силач <имя силача> начал соревнования.'
После должна выводиться строка - 'Силач <имя силача> поднял <номер шара>' с задержкой обратно пропорциональной его силе power. Для каждого участника количество шаров одинаковое - 5.
В конце поднятия всех шаров должна выводится строка 'Силач <имя силача> закончил соревнования.'
Также напишите асинхронную функцию start_tournament, в которой создаются 3 задачи для функций start_strongman. Имена(name) и силу(power) для вызовов функции start_strongman можете выбрать самостоятельно.
После поставьте каждую задачу в ожидание (await).
Запустите асинхронную функцию start_tournament методом run.

Пример результата выполнения программы:
Переданные аргументы в функции start_strongman:
'Pasha', 3
'Denis', 4
'Apollon', 5
Вывод на консоль:
Силач Pasha начал соревнования
Силач Denis начал соревнования
Силач Apollon начал соревнования
Силач Apollon поднял 1 шар
Силач Denis поднял 1 шар
Силач Pasha поднял 1 шар
Силач Apollon поднял 2 шар
Силач Denis поднял 2 шар
Силач Apollon поднял 3 шар
Силач Pasha поднял 2 шар
Силач Denis поднял 3 шар
Силач Apollon поднял 4 шар
Силач Pasha поднял 3 шар
Силач Apollon поднял 5 шар
Силач Apollon закончил соревнования
Силач Denis поднял 4 шар
Силач Denis поднял 5 шар
Силач Denis закончил соревнования
Силач Pasha поднял 4 шар
Силач Pasha поднял 5 шар
Силач Pasha закончил соревнования
Примечания:
Для обозначения асинхронной функции используйте оператор async.
Для постановки задачи в режим ожидания используйте оператор await.
Для задержки в асинхронной функции используйте функцию sleep из пакета asyncio.
Для запуска асинхронной функции используйте функцию run из пакета asyncio.
Файл module_13_1.py загрузите на ваш GitHub репозиторий. В решении пришлите ссылку на него.
"""
